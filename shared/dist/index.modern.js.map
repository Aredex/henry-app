{"version":3,"file":"index.modern.js","sources":["../src/hooks/usePagination/index.ts","../src/hooks/useQueryWithPagination/index.ts","../src/hooks/useCohortes/COHORTES.ts","../src/hooks/useCohortes/index.ts","../src/hooks/useGroups/GROUPS.ts","../src/hooks/useGroups/index.ts","../src/hooks/useUsers/USERS.ts","../src/hooks/useUsers/index.ts","../src/hooks/index.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\nimport Config from '../../types/config'\nimport UsePagination from '../../types/usePagination'\n\nexport default function usePagination(config: Config): UsePagination {\n  const initialValues = {\n    rowsPerPageOptions: [5, 10, 25, 50, 100],\n    rowsPerPage: 5,\n    ...config\n  }\n  const [rowsPerPageOptions] = useState(initialValues.rowsPerPageOptions)\n  const [rowsPerPage, setRowsPerPage] = useState(initialValues.rowsPerPage)\n  const [page, setPage] = useState(0)\n  const onChangePage = useCallback(\n    (page: number) => {\n      setPage(page)\n    },\n    [setPage]\n  )\n  const onChangeRowsPerPage = useCallback(\n    (rows: number) => {\n      setRowsPerPage(rows)\n    },\n    [setRowsPerPage]\n  )\n\n  return {\n    rowsPerPageOptions,\n    rowsPerPage,\n    page,\n    onChangePage,\n    onChangeRowsPerPage\n  }\n}\n","import {\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  useLazyQuery\n} from '@apollo/client'\nimport { useCallback, useMemo } from 'react'\nimport usePagination from '../usePagination'\nimport Config from '../../types/config'\nimport UseQueryWithPagination from '../../types/useQueryWithPagination'\n\nexport default function useQueryWithPagination<T = any>(\n  QUERY_DEFINITION: DocumentNode | TypedDocumentNode<any, Record<string, any>>,\n  variables: OperationVariables,\n  config: Config\n): UseQueryWithPagination<T> {\n  const { where, order } = useMemo(() => ({ ...variables }), [variables])\n  const [execute, { loading, data, refetch }] = useLazyQuery(QUERY_DEFINITION)\n  const pagination = usePagination(config)\n  const { rowsPerPage, page } = pagination\n  const result = useMemo(() => data?.result || undefined, [data])\n  const count = useMemo(() => data?.count || undefined, [data])\n  const fetch = useCallback(\n    () =>\n      execute({\n        variables: {\n          where,\n          order,\n          limit: rowsPerPage,\n          offset: rowsPerPage * page\n        }\n      }),\n    [rowsPerPage, page]\n  )\n  return {\n    fetch,\n    result,\n    count,\n    loading,\n    refetch,\n    ...pagination\n  }\n}\n","import { gql } from '@apollo/client'\n\nexport const COHORTES = gql`\n  query COHORTES($where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: cohortes(\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      name\n      startDate\n      instructor {\n        id\n        givenName\n        familyName\n      }\n      users {\n        id\n      }\n      groups {\n        id\n      }\n    }\n    count: countCohortes(where: $where)\n  }\n`\nexport const CREATE_COHORTE = gql`\n  mutation createCohorte($name: String, $startDate: String, $instructor: Int) {\n    createCohorte(\n      input: { name: $name, startDate: $startDate, instructor: $instructor }\n    ) {\n      id\n    }\n  }\n`\n","import { useMutation } from '@apollo/client'\nimport { useCallback, useMemo } from 'react'\nimport useQueryWithPagination from '../useQueryWithPagination'\nimport { COHORTES, CREATE_COHORTE } from './COHORTES'\nimport Config from '../../types/config'\nimport Cohorte from '../../types/Cohorte'\n\nexport { default as Cohorte } from '../../types/Cohorte'\n\nexport default function useCohortes(\n  variables: Record<string, any>,\n  config?: Config\n) {\n  const withPagination = useQueryWithPagination<Cohorte>(\n    COHORTES,\n    variables,\n    config\n  )\n\n  const [_create, createObserver] = useMutation(CREATE_COHORTE)\n\n  const create = useCallback((...args) => {\n    _create(...args)\n  }, [])\n\n  const loading = useMemo(\n    () => withPagination.loading || createObserver.loading,\n    [withPagination.loading, createObserver.loading]\n  )\n\n  return { ...withPagination, create, loading }\n}\n","import { gql } from '@apollo/client'\n\nexport const GROUPS = gql`\n  query GROUPS($where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: groups(\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      name\n      type\n    }\n    count: countGroups(where: $where)\n  }\n`\n","import useQueryWithPagination from '../useQueryWithPagination'\nimport { GROUPS } from './GROUPS'\nimport Config from '../../types/config'\n\nexport default function useGroups(\n  variables: Record<string, any>,\n  config?: Config\n) {\n  const hook = useQueryWithPagination(GROUPS, variables, config)\n  return hook\n}\n","import { gql } from '@apollo/client'\n\nexport const USERS = gql`\n  query USERS($id: Int, $where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: users(\n      id: $id\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      givenName\n      familyName\n      nickName\n      email\n      photoUrl\n      roles {\n        id\n        name\n      }\n      cohortes {\n        id\n        name\n      }\n    }\n    count: countUsers(where: $where)\n  }\n`\n","import useQueryWithPagination from '../useQueryWithPagination'\nimport { USERS } from './USERS'\n\nexport default function useUsers(variables, config) {\n  const hook = useQueryWithPagination(USERS, variables, config)\n  return hook\n}\n","import useCohortes from './useCohortes'\nimport useGroups from './useGroups'\nimport usePagination from './usePagination'\nimport useUsers from './useUsers'\n\nexport default {\n  useCohortes,\n  useGroups,\n  usePagination,\n  useUsers\n}\n"],"names":["usePagination","config","initialValues","rowsPerPageOptions","rowsPerPage","useState","setRowsPerPage","page","setPage","onChangePage","useCallback","onChangeRowsPerPage","rows","useQueryWithPagination","QUERY_DEFINITION","variables","where","order","useMemo","execute","loading","data","refetch","useLazyQuery","pagination","result","undefined","count","fetch","limit","offset","COHORTES","gql","CREATE_COHORTE","useCohortes","withPagination","_create","createObserver","useMutation","create","args","GROUPS","useGroups","hook","USERS","useUsers"],"mappings":"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"}