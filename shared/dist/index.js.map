{"version":3,"file":"index.js","sources":["../src/hooks/usePagination/index.ts","../src/hooks/useQueryWithPagination/index.ts","../src/hooks/useCohortes/COHORTES.ts","../src/hooks/useCohortes/index.ts","../src/hooks/useGroups/GROUPS.ts","../src/hooks/useGroups/index.ts","../src/hooks/useUsers/USERS.ts","../src/hooks/useUsers/index.ts","../src/hooks/index.ts"],"sourcesContent":["import { useCallback, useState } from 'react'\nimport Config from '../../types/config'\nimport UsePagination from '../../types/usePagination'\n\nexport default function usePagination(config: Config): UsePagination {\n  const initialValues = {\n    rowsPerPageOptions: [5, 10, 25, 50, 100],\n    rowsPerPage: 5,\n    ...config\n  }\n  const [rowsPerPageOptions] = useState(initialValues.rowsPerPageOptions)\n  const [rowsPerPage, setRowsPerPage] = useState(initialValues.rowsPerPage)\n  const [page, setPage] = useState(0)\n  const onChangePage = useCallback(\n    (page: number) => {\n      setPage(page)\n    },\n    [setPage]\n  )\n  const onChangeRowsPerPage = useCallback(\n    (rows: number) => {\n      setRowsPerPage(rows)\n    },\n    [setRowsPerPage]\n  )\n\n  return {\n    rowsPerPageOptions,\n    rowsPerPage,\n    page,\n    onChangePage,\n    onChangeRowsPerPage\n  }\n}\n","import {\n  DocumentNode,\n  OperationVariables,\n  TypedDocumentNode,\n  useLazyQuery\n} from '@apollo/client'\nimport { useCallback, useMemo } from 'react'\nimport usePagination from '../usePagination'\nimport Config from '../../types/config'\nimport UseQueryWithPagination from '../../types/useQueryWithPagination'\n\nexport default function useQueryWithPagination<T = any>(\n  QUERY_DEFINITION: DocumentNode | TypedDocumentNode<any, Record<string, any>>,\n  variables: OperationVariables,\n  config: Config\n): UseQueryWithPagination<T> {\n  const { where, order } = useMemo(() => ({ ...variables }), [variables])\n  const [execute, { loading, data, refetch }] = useLazyQuery(QUERY_DEFINITION)\n  const pagination = usePagination(config)\n  const { rowsPerPage, page } = pagination\n  const result = useMemo(() => data?.result || undefined, [data])\n  const count = useMemo(() => data?.count || undefined, [data])\n  const fetch = useCallback(\n    () =>\n      execute({\n        variables: {\n          where,\n          order,\n          limit: rowsPerPage,\n          offset: rowsPerPage * page\n        }\n      }),\n    [rowsPerPage, page]\n  )\n  return {\n    fetch,\n    result,\n    count,\n    loading,\n    refetch,\n    ...pagination\n  }\n}\n","import { gql } from '@apollo/client'\n\nexport const COHORTES = gql`\n  query COHORTES($where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: cohortes(\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      name\n      startDate\n      instructor {\n        id\n        givenName\n        familyName\n      }\n      users {\n        id\n      }\n      groups {\n        id\n      }\n    }\n    count: countCohortes(where: $where)\n  }\n`\nexport const CREATE_COHORTE = gql`\n  mutation createCohorte($name: String, $startDate: String, $instructor: Int) {\n    createCohorte(\n      input: { name: $name, startDate: $startDate, instructor: $instructor }\n    ) {\n      id\n    }\n  }\n`\n","import { useMutation } from '@apollo/client'\nimport { useCallback, useMemo } from 'react'\nimport useQueryWithPagination from '../useQueryWithPagination'\nimport { COHORTES, CREATE_COHORTE } from './COHORTES'\nimport Config from '../../types/config'\nimport Cohorte from '../../types/Cohorte'\n\nexport { default as Cohorte } from '../../types/Cohorte'\n\nexport default function useCohortes(\n  variables: Record<string, any>,\n  config?: Config\n) {\n  const withPagination = useQueryWithPagination<Cohorte>(\n    COHORTES,\n    variables,\n    config\n  )\n\n  const [_create, createObserver] = useMutation(CREATE_COHORTE)\n\n  const create = useCallback((...args) => {\n    _create(...args)\n  }, [])\n\n  const loading = useMemo(\n    () => withPagination.loading || createObserver.loading,\n    [withPagination.loading, createObserver.loading]\n  )\n\n  return { ...withPagination, create, loading }\n}\n","import { gql } from '@apollo/client'\n\nexport const GROUPS = gql`\n  query GROUPS($where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: groups(\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      name\n      type\n    }\n    count: countGroups(where: $where)\n  }\n`\n","import useQueryWithPagination from '../useQueryWithPagination'\nimport { GROUPS } from './GROUPS'\nimport Config from '../../types/config'\n\nexport default function useGroups(\n  variables: Record<string, any>,\n  config?: Config\n) {\n  const hook = useQueryWithPagination(GROUPS, variables, config)\n  return hook\n}\n","import { gql } from '@apollo/client'\n\nexport const USERS = gql`\n  query USERS($id: Int, $where: JSON, $limit: Int, $offset: Int, $order: JSON) {\n    result: users(\n      id: $id\n      where: $where\n      limit: $limit\n      offset: $offset\n      order: $order\n    ) {\n      id\n      givenName\n      familyName\n      nickName\n      email\n      photoUrl\n      roles {\n        id\n        name\n      }\n      cohortes {\n        id\n        name\n      }\n    }\n    count: countUsers(where: $where)\n  }\n`\n","import useQueryWithPagination from '../useQueryWithPagination'\nimport { USERS } from './USERS'\n\nexport default function useUsers(variables, config) {\n  const hook = useQueryWithPagination(USERS, variables, config)\n  return hook\n}\n","import useCohortes from './useCohortes'\nimport useGroups from './useGroups'\nimport usePagination from './usePagination'\nimport useUsers from './useUsers'\n\nexport default {\n  useCohortes,\n  useGroups,\n  usePagination,\n  useUsers\n}\n"],"names":["usePagination","config","initialValues","rowsPerPageOptions","rowsPerPage","useState","setRowsPerPage","page","setPage","onChangePage","useCallback","onChangeRowsPerPage","rows","useQueryWithPagination","QUERY_DEFINITION","variables","useMemo","where","order","useLazyQuery","execute","loading","data","refetch","pagination","result","undefined","count","fetch","limit","offset","COHORTES","gql","CREATE_COHORTE","useCohortes","withPagination","useMutation","_create","createObserver","create","GROUPS","useGroups","hook","USERS","useUsers"],"mappings":"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"}