{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/home/aredex/HENRY/henry-app/Paper/src/routes/AppRouter.js\";\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { signInWithToken, initialize, signOut } from \"../dispatchers/auth\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DrawerRoutes from \"./DrawerRoutes/DrawerRoutes\";\nimport LogRoutes from \"./LogRoutes/LogRoutes\";\n\nvar AppRouter = function AppRouter(_ref) {\n  var handleTheme = _ref.handleTheme;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.auth;\n  }),\n      authenticated = _useSelector.authenticated;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.ui;\n  }),\n      loading = _useSelector2.loading;\n\n  useEffect(function () {\n    setTimeout(function _callee() {\n      var token;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"token\"));\n\n            case 2:\n              token = _context.sent;\n\n              if (token) {\n                dispatch(signInWithToken(token));\n                initialize(token);\n              } else {\n                dispatch(signOut());\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }, 1000);\n  }, []);\n\n  if (loading) {\n    return React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 12\n      }\n    }, \" Loading \");\n  }\n\n  return React.createElement(React.Fragment, null, authenticated ? React.createElement(DrawerRoutes, {\n    handleTheme: handleTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 11\n    }\n  }) : React.createElement(LogRoutes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }));\n};\n\nexport default AppRouter;","map":{"version":3,"sources":["/home/aredex/HENRY/henry-app/Paper/src/routes/AppRouter.js"],"names":["React","useEffect","useDispatch","useSelector","AsyncStorage","signInWithToken","initialize","signOut","DrawerRoutes","LogRoutes","AppRouter","handleTheme","dispatch","state","auth","authenticated","ui","loading","setTimeout","getItem","token"],"mappings":";;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAIA,OAAOC,YAAP,MAAyB,uCAAzB;AAUA,SAASC,eAAT,EAA0BC,UAA1B,EAAsCC,OAAtC;;AAEA,OAAOC,YAAP;AACA,OAAOC,SAAP;;AAKA,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAqB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AACrC,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;;AADqC,qBAGXC,WAAW,CAAC,UAACU,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAHA;AAAA,MAG7BC,aAH6B,gBAG7BA,aAH6B;;AAAA,sBAIjBZ,WAAW,CAAC,UAACU,KAAD;AAAA,WAAWA,KAAK,CAACG,EAAjB;AAAA,GAAD,CAJM;AAAA,MAI7BC,OAJ6B,iBAI7BA,OAJ6B;;AAMrChB,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,UAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACWd,YAAY,CAACe,OAAb,CAAqB,OAArB,CADX;;AAAA;AACHC,cAAAA,KADG;;AAET,kBAAIA,KAAJ,EAAW;AACTR,gBAAAA,QAAQ,CAACP,eAAe,CAACe,KAAD,CAAhB,CAAR;AACAd,gBAAAA,UAAU,CAACc,KAAD,CAAV;AACD,eAHD,MAGO;AACLR,gBAAAA,QAAQ,CAACL,OAAO,EAAR,CAAR;AACD;;AAPQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,EAQP,IARO,CAAV;AASD,GAVQ,EAUN,EAVM,CAAT;;AAYA,MAAIU,OAAJ,EAAa;AACX,WAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD;;AAED,SACE,0CAqBIF,aAAa,GACX,oBAAC,YAAD;AAAc,IAAA,WAAW,EAAEJ,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,GAGX,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBN,CADF;AA8BD,CApDD;;AAsDA,eAAeD,SAAf","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// import { createDrawerNavigator } from \"@react-navigation/drawer\";\n// import { createStackNavigator } from \"@react-navigation/stack\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\n\n// import DrawerLayout from \"../components/drawerLayout/DrawerLayout\";\n// import HomeScreen from \"../screens/LoginScreen/LoginScreen\";\n// import SignUp from \"../screens/SignUp/SignUp\";\n// import Settings from \"../screens/Settings/Settings\";\n// import Cohorte from \"../screens/Cohorte/Cohorte\";\n// import Pm from \"../screens/Pm/Pm\";\n// import Grupos from \"../screens/Grupos/Grupos\";\n\nimport { signInWithToken, initialize, signOut } from \"../dispatchers/auth\";\nimport { Text } from \"react-native\";\nimport DrawerRoutes from \"./DrawerRoutes/DrawerRoutes\";\nimport LogRoutes from './LogRoutes/LogRoutes'\n\n// const Drawer = createDrawerNavigator();\n// const LogInStack = createStackNavigator();\n\nconst AppRouter = ({ handleTheme }) => {\n  const dispatch = useDispatch();\n\n  const { authenticated } = useSelector((state) => state.auth);\n  const { loading } = useSelector((state) => state.ui);\n\n  useEffect(() => {\n    setTimeout(async () => {\n      const token = await AsyncStorage.getItem(\"token\");\n      if (token) {\n        dispatch(signInWithToken(token));\n        initialize(token);\n      } else {\n        dispatch(signOut());\n      }\n    }, 1000);\n  }, []);\n\n  if (loading) {\n    return <Text> Loading </Text>;\n  }\n\n  return (\n    <>\n      {/* {authenticated ? (\n        <Drawer.Navigator\n          drawerContent={(props) => (\n            <DrawerLayout {...props} handleTheme={handleTheme} />\n          )}\n          initialRouteName=\"Cohorte\"\n        >\n          <Drawer.Screen name=\"Settings\" component={Settings} />\n          <Drawer.Screen name=\"Cohorte\" component={Cohorte} />\n          <Drawer.Screen name=\"Pm\" component={Pm} />\n          <Drawer.Screen name=\"Grupos\" component={Grupos} />\n        </Drawer.Navigator>\n      ) : (\n        <LogInStack.Navigator headerMode=\"none\">\n          <LogInStack.Screen name=\"Home\" component={HomeScreen} />\n          <LogInStack.Screen name=\"SignUp\" component={SignUp} />\n        </LogInStack.Navigator>\n      )} */}\n\n      {\n        authenticated ? (\n          <DrawerRoutes handleTheme={handleTheme}/>\n        ) : (\n          <LogRoutes/>\n        )\n      }\n    </>\n  );\n};\n\nexport default AppRouter;\n"]},"metadata":{},"sourceType":"module"}